const { chromium } = require('playwright');
const XLSX = require('xlsx');
const fs = require('fs');
const path = require('path');

// ===== CONFIGURA√á√ïES GLOBAIS =====
const CONFIG = {
    TIMEOUT_NAVEGACAO: 30000,
    MAX_TENTATIVAS_ERRO: 3,
    TIMEOUT_MENSAGEM_SUCESSO: 15000,
    TIMEOUT_LIMPEZA_FORMULARIO: 3000,
    TIMEOUT_CARREGAMENTO_CAMPO: 4000
};

// ===== FUN√á√ÉO UTILIT√ÅRIA PARA LOG COM TIMESTAMP =====
function logComTimestamp(mensagem) {
    const timestamp = new Date().toLocaleString('pt-BR');
    console.log(`[${timestamp}] ${mensagem}`);
}

// ===== FUN√á√ÉO PARA VERIFICAR SUCESSO DO LAN√áAMENTO =====
async function verificarSucessoLancamento(page) {
    logComTimestamp('üîç Verificando se apareceu mensagem de sucesso...');
    
    try {
        const frameContent = page.locator('#iframeasp').contentFrame()
            .locator('iframe[name="principal2"]').contentFrame();
        
        const mensagemSucesso = frameContent.locator('#txt_msg');
        
        // Aguarda a mensagem aparecer
        await mensagemSucesso.waitFor({ 
            state: 'visible', 
            timeout: CONFIG.TIMEOUT_MENSAGEM_SUCESSO 
        });
        
        const textoMensagem = await mensagemSucesso.textContent();
        
        if (textoMensagem?.includes('Opera√ß√£o realizada com sucesso')) {
            const match = textoMensagem.match(/Item\(s\) Pagamento gerado\(s\) : (\d+)/);
            const numeroPagamento = match ? match[1] : 'N/A';
            
            logComTimestamp(`‚úÖ SUCESSO confirmado! Pagamento gerado: ${numeroPagamento}`);
            return {
                sucesso: true,
                mensagem: textoMensagem.trim(),
                numeroPagamento: numeroPagamento
            };
        } else {
            logComTimestamp(`‚ö†Ô∏è Mensagem encontrada mas sem confirma√ß√£o de sucesso: "${textoMensagem}"`);
            return {
                sucesso: false,
                mensagem: textoMensagem ? textoMensagem.trim() : 'Mensagem vazia',
                numeroPagamento: null,
                motivo: 'Mensagem n√£o indica sucesso'
            };
        }
        
    } catch (timeoutError) {
        logComTimestamp('‚ùå FALHA: Nenhuma mensagem de sucesso apareceu no tempo esperado');
        return {
            sucesso: false,
            mensagem: null,
            numeroPagamento: null,
            motivo: 'Timeout aguardando mensagem de sucesso'
        };
    }
}

// ===== VALIDA√á√ÉO DA PLANILHA =====
async function validarPlanilha(dados) {
    logComTimestamp('üîç Validando dados da planilha...');
    
    const errosValidacao = [];
    
    dados.forEach((linha, index) => {
        const numeroLinha = index + 1;
        
        // Valida√ß√µes obrigat√≥rias
        if (!linha.cod_tipo_rubrica) {
            errosValidacao.push(`Linha ${numeroLinha}: C√≥digo Tipo Rubrica est√° vazio`);
        }
        
        if (!linha.cod_prestador) {
            errosValidacao.push(`Linha ${numeroLinha}: C√≥digo Prestador est√° vazio`);
        }
        
        if (!linha.val_bruto) {
            errosValidacao.push(`Linha ${numeroLinha}: Valor Bruto est√° vazio`);
        }
        
        // Valida√ß√£o de formato de data (se preenchida)
        if (linha.dt_pgto_prevista && linha.dt_pgto_prevista.length > 0) {
            const formatoData = /^\d{2}\/\d{2}\/\d{4}$/;
            if (!formatoData.test(linha.dt_pgto_prevista)) {
                errosValidacao.push(`Linha ${numeroLinha}: Data de pagamento deve estar no formato DD/MM/AAAA`);
            }
        }
        
        // Valida√ß√£o de formato de m√™s/ano (se preenchida)
        if (linha.mes_ano_ref && linha.mes_ano_ref.length > 0) {
            const formatoMesAno = /^\d{2}\/\d{4}$/;
            if (!formatoMesAno.test(linha.mes_ano_ref)) {
                errosValidacao.push(`Linha ${numeroLinha}: M√™s/Ano deve estar no formato MM/AAAA`);
            }
        }
    });
    
    if (errosValidacao.length > 0) {
        console.error('‚ùå ERROS DE VALIDA√á√ÉO ENCONTRADOS:');
        errosValidacao.forEach(erro => console.error(`   - ${erro}`));
        throw new Error(`${errosValidacao.length} erro(s) de valida√ß√£o encontrado(s)`);
    }
    
    logComTimestamp(`‚úÖ Valida√ß√£o conclu√≠da: ${dados.length} linha(s) v√°lida(s)`);
}

async function lerPlanilhaExcel() {
    try {
        logComTimestamp('üìä Lendo planilha Excel...');
        
        if (!fs.existsSync('dados_lancamento.xlsx')) {
            throw new Error('Arquivo dados_lancamento.xlsx n√£o encontrado');
        }
        
        const workbook = XLSX.readFile('dados_lancamento.xlsx');
        const firstSheetName = workbook.SheetNames[0];
        const worksheet = workbook.Sheets[firstSheetName];
        
        const dados = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        
        // Remove linhas completamente vazias
        const dadosLimpos = dados.filter(linha => 
            linha && linha.some(celula => celula !== undefined && celula !== null && celula.toString().trim() !== '')
        );
        
        logComTimestamp(`‚úÖ Planilha lida com sucesso! ${dadosLimpos.length} linha(s) encontrada(s)`);
        
        const dadosFormatados = dadosLimpos.map((linha, index) => {
            return {
                linha: index + 1,
                cod_tipo_rubrica: linha[0]?.toString().trim() || '',
                cod_prestador: linha[1]?.toString().trim() || '',
                mes_ano_ref: linha[2]?.toString().trim() || '',
                val_bruto: linha[3]?.toString().trim() || '',
                dt_pgto_prevista: linha[4]?.toString().trim() || '',
                observacoes: linha[5]?.toString().trim() || ''
            };
        });
        
        await validarPlanilha(dadosFormatados);
        return dadosFormatados;
        
    } catch (error) {
        console.error('‚ùå Erro ao ler planilha Excel:', error.message);
        throw error;
    }
}

async function aguardarLimpezaFormulario(frameContent) {
    logComTimestamp('üßπ Aguardando formul√°rio ser limpo/preparado...');
    
    try {
        // Aguarda o campo cod_tipo_rubrica estar limpo ou pronto para preenchimento
        await frameContent.locator('#cod_tipo_rubrica').waitFor({ state: 'attached' });
        
        // Aguarda um pouco mais para garantir que o formul√°rio foi completamente limpo
        await new Promise(resolve => setTimeout(resolve, CONFIG.TIMEOUT_LIMPEZA_FORMULARIO));
        
        logComTimestamp('‚úÖ Formul√°rio preparado para preenchimento');
    } catch (error) {
        logComTimestamp('‚ö†Ô∏è Erro ao aguardar limpeza do formul√°rio, continuando...');
    }
}

async function aguardarCarregamentoCampo(frameContent, campo, valorPreenchido) {
    logComTimestamp(`‚è≥ Aguardando carregamento de informa√ß√µes do campo ${campo}...`);
    
    try {
        // Para cod_tipo_rubrica e cod_prestador, aguarda poss√≠veis mudan√ßas de estado
        // ou carregamento de informa√ß√µes relacionadas
        await new Promise(resolve => setTimeout(resolve, CONFIG.TIMEOUT_CARREGAMENTO_CAMPO));
        
        logComTimestamp(`‚úÖ Carregamento do campo ${campo} conclu√≠do`);
    } catch (error) {
        logComTimestamp(`‚ö†Ô∏è Erro ao aguardar carregamento do campo ${campo}`);
    }
}

async function preencherFormulario(page, dados) {
    logComTimestamp(`üìã Preenchendo formul√°rio com dados da linha ${dados.linha}...`);
    
    const frameContent = page.locator('#iframeasp').contentFrame()
        .locator('iframe[name="principal2"]').contentFrame();
    
    try {
        // Fun√ß√£o auxiliar para preencher campo com aguardo espec√≠fico
        async function preencherCampo(campo, valor, usarTab = false, aguardarCarregamento = false) {
            if (!valor) return; // Pula campos vazios
            
            logComTimestamp(`‚úèÔ∏è Preenchendo ${campo}: ${valor}`);
            
            const campoElement = frameContent.locator(`#${campo}`);
            await campoElement.fill(valor);
            
            if (usarTab) {
                await campoElement.press('Tab');
            }
            
            // Aguarda carregamento espec√≠fico para campos que carregam informa√ß√µes
            if (aguardarCarregamento) {
                await aguardarCarregamentoCampo(frameContent, campo, valor);
            }
        }
        
        // Preenche campos cr√≠ticos com aguardo de carregamento
        await preencherCampo('cod_tipo_rubrica', dados.cod_tipo_rubrica, true, true);
        await preencherCampo('cod_prestador', dados.cod_prestador, true, true);
        
        // Preenche demais campos normalmente
        await preencherCampo('mes_ano_ref', dados.mes_ano_ref);
        await preencherCampo('val_bruto', dados.val_bruto);
        await preencherCampo('dt_pgto_prevista', dados.dt_pgto_prevista);
        await preencherCampo('txt_obs_lm', dados.observacoes);
        
        logComTimestamp(`‚úÖ Formul√°rio da linha ${dados.linha} preenchido com sucesso!`);
        
    } catch (error) {
        console.error(`‚ùå Erro ao preencher formul√°rio da linha ${dados.linha}:`, error.message);
        throw error;
    }
}

async function criarRelatorioExecucao(dadosProcessados, sucessos, erros, tempoExecucao) {
    const agora = new Date();
    const timestamp = agora.toISOString().replace(/[:.]/g, '-').slice(0, 19);
    
    const relatorio = {
        data_execucao: agora.toLocaleString('pt-BR'),
        tempo_execucao_minutos: Math.round(tempoExecucao / 60000 * 100) / 100,
        total_linhas: dadosProcessados.length,
        sucessos: sucessos,
        erros: erros,
        taxa_sucesso: `${((sucessos / dadosProcessados.length) * 100).toFixed(1)}%`,
        configuracoes_utilizadas: CONFIG,
        detalhes: dadosProcessados
    };
    
    const nomeArquivo = `relatorio_execucao_${timestamp}.json`;
    
    try {
        fs.writeFileSync(nomeArquivo, JSON.stringify(relatorio, null, 2), 'utf8');
        logComTimestamp(`üìÑ Relat√≥rio de execu√ß√£o salvo: ${nomeArquivo}`);
        return nomeArquivo;
    } catch (error) {
        console.error('‚ùå Erro ao salvar relat√≥rio:', error.message);
        return null;
    }
}

async function aguardarLogin(page) {
    logComTimestamp('‚è≥ Aguardando login manual...');
    
    // Aguarda mudan√ßa na URL ou elementos espec√≠ficos da p√°gina logada
    try {
        await page.waitForFunction(() => {
            return window.location.href.includes('/Home') || 
                   window.location.href.includes('/Dashboard') ||
                   !window.location.href.includes('/Account/Login');
        }, { timeout: 120000 }); // 2 minutos
        
        logComTimestamp('‚úÖ Login detectado com sucesso!');
        return true;
    } catch (error) {
        throw new Error('Timeout aguardando login manual. Verifique se fez login corretamente.');
    }
}

async function automatizarUnimed() {
    const inicioExecucao = Date.now();
    
    console.log('üöÄ Iniciando Automa√ß√£o');
    console.log('‚ö†Ô∏è ATEN√á√ÉO: Esta execu√ß√£o VAI SALVAR os lan√ßamentos no sistema!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    const todosOsDados = await lerPlanilhaExcel();
    logComTimestamp(`üìä Total de lan√ßamentos a processar: ${todosOsDados.length}`);
    
    let sucessos = 0;
    let erros = 0;
    const resultadosDetalhados = [];
    
    const browser = await chromium.launch({ 
        headless: false,
        timeout: 60000
    });
    
    const page = await browser.newPage();
    page.setDefaultTimeout(CONFIG.TIMEOUT_NAVEGACAO);
    
    try {
        // ===== LOGIN MANUAL =====
        logComTimestamp('üìù Acessando p√°gina de login...');
        await page.goto('https://unimedcerrado.topsaude.com.br/TSNMVC/Account/Login');
        
        console.log('\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó');
        console.log('‚ïë                    üîê LOGIN MANUAL                           ‚ïë');
        console.log('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù');
        console.log('');
        console.log('üåê A p√°gina de login foi aberta no navegador');
        console.log('üìù Por favor, fa√ßa seu login manualmente');
        console.log('‚ö†Ô∏è  A automa√ß√£o continuar√° automaticamente ap√≥s o login');
        console.log('');
        
        await aguardarLogin(page);
        
        logComTimestamp('üß≠ Navegando para Lan√ßamento Manual...');
        await page.getByRole('link', { name: ' Pagamento' }).click();
        await page.getByRole('link', { name: 'Lan√ßamento Manual' }).click();
        
        // ===== PROCESSAMENTO DE CADA LINHA =====
        logComTimestamp('\nüîÑ === INICIANDO PROCESSAMENTO DOS LAN√áAMENTOS ===');
        
        const toolbarFrame = page.locator('#iframeasp').contentFrame()
            .locator('iframe[name="toolbarMvcToAsp"]').contentFrame();
        const incluirButton = toolbarFrame.getByRole('img', { name: 'Incluir' });
        
        for (let i = 0; i < todosOsDados.length; i++) {
            const dadosLinha = todosOsDados[i];
            const numeroLancamento = i + 1;
            
            logComTimestamp(`\nüîÑ === PROCESSANDO LAN√áAMENTO ${numeroLancamento} de ${todosOsDados.length} ===`);
            logComTimestamp(`üìã Dados: ${dadosLinha.cod_tipo_rubrica} | ${dadosLinha.cod_prestador} | ${dadosLinha.val_bruto}`);
            
            let tentativasRestantes = CONFIG.MAX_TENTATIVAS_ERRO;
            let sucessoLancamento = false;
            let resultadoValidacao = null;
            
            while (tentativasRestantes > 0 && !sucessoLancamento) {
                try {
                    // PRIMEIRO CLIQUE: Incluir para abrir/limpar formul√°rio
                    logComTimestamp('‚ûï [1/4] Clicando no bot√£o Incluir para abrir formul√°rio...');
                    await incluirButton.click();
                    
                    // CR√çTICO: Aguarda o formul√°rio ser limpo/preparado
                    const frameContent = page.locator('#iframeasp').contentFrame()
                        .locator('iframe[name="principal2"]').contentFrame();
                    await aguardarLimpezaFormulario(frameContent);
                    
                    // Preenche o formul√°rio
                    logComTimestamp('üìù [2/4] Preenchendo formul√°rio...');
                    await preencherFormulario(page, dadosLinha);
                    
                    // SEGUNDO CLIQUE: Incluir para salvar
                    logComTimestamp(`üíæ [3/4] Clicando no bot√£o Incluir para salvar lan√ßamento ${numeroLancamento}...`);
                    await incluirButton.click();
                    
                    // VALIDA√á√ÉO: Verifica se apareceu mensagem de sucesso
                    logComTimestamp('üîç [4/4] Validando se lan√ßamento foi salvo com sucesso...');
                    resultadoValidacao = await verificarSucessoLancamento(page);
                    
                    if (resultadoValidacao.sucesso) {
                        sucessos++;
                        sucessoLancamento = true;
                        resultadosDetalhados.push({
                            linha: numeroLancamento,
                            status: 'SUCESSO',
                            dados: dadosLinha,
                            mensagem_sucesso: resultadoValidacao.mensagem,
                            numero_pagamento: resultadoValidacao.numeroPagamento,
                            tentativas_utilizadas: CONFIG.MAX_TENTATIVAS_ERRO - tentativasRestantes + 1,
                            timestamp: new Date().toLocaleString('pt-BR')
                        });
                        
                        logComTimestamp(`üéâ Lan√ßamento ${numeroLancamento} CONFIRMADO com sucesso! Pagamento: ${resultadoValidacao.numeroPagamento}`);
                        
                    } else {
                        throw new Error(`Lan√ßamento n√£o foi salvo: ${resultadoValidacao.motivo}`);
                    }
                    
                } catch (error) {
                    tentativasRestantes--;
                    const tentativaAtual = CONFIG.MAX_TENTATIVAS_ERRO - tentativasRestantes;
                    
                    console.error(`‚ùå ERRO na tentativa ${tentativaAtual} do lan√ßamento ${numeroLancamento}:`, error.message);
                    
                    if (tentativasRestantes > 0) {
                        logComTimestamp(`üîÑ Tentando novamente... (${tentativasRestantes} tentativa(s) restante(s))`);
                    } else {
                        erros++;
                        resultadosDetalhados.push({
                            linha: numeroLancamento,
                            status: 'ERRO',
                            dados: dadosLinha,
                            erro: error.message,
                            resultado_validacao: resultadoValidacao,
                            tentativas_utilizadas: CONFIG.MAX_TENTATIVAS_ERRO,
                            timestamp: new Date().toLocaleString('pt-BR')
                        });
                        
                        const nomeScreenshot = `erro_lancamento_${numeroLancamento}_${Date.now()}.png`;
                        await page.screenshot({ 
                            path: nomeScreenshot, 
                            fullPage: true 
                        });
                        
                        logComTimestamp(`üì∏ Screenshot do erro salvo como: ${nomeScreenshot}`);
                        logComTimestamp('‚è≠Ô∏è Continuando para o pr√≥ximo lan√ßamento...');
                    }
                }
            }
        }
        
        // ===== RELAT√ìRIO FINAL =====
        const fimExecucao = Date.now();
        const tempoExecucao = fimExecucao - inicioExecucao;
        
        console.log(`\nüéâ === PROCESSAMENTO CONCLU√çDO ===`);
        logComTimestamp(`üìä RESULTADOS:`);
        logComTimestamp(`   ‚úÖ Sucessos: ${sucessos}`);
        logComTimestamp(`   ‚ùå Erros: ${erros}`);
        logComTimestamp(`   üìã Total: ${todosOsDados.length}`);
        logComTimestamp(`   üìà Taxa de sucesso: ${((sucessos / todosOsDados.length) * 100).toFixed(1)}%`);
        logComTimestamp(`   ‚è±Ô∏è Tempo total: ${Math.round(tempoExecucao / 60000 * 100) / 100} minutos`);
        
        const arquivoRelatorio = await criarRelatorioExecucao(resultadosDetalhados, sucessos, erros, tempoExecucao);
        
        if (arquivoRelatorio) {
            logComTimestamp(`üìÑ Relat√≥rio detalhado dispon√≠vel em: ${arquivoRelatorio}`);
        }
        
        console.log('\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        if (sucessos === todosOsDados.length) {
            console.log('üéâ PARAB√âNS! Todos os lan√ßamentos foram processados com sucesso!');
        } else if (sucessos > 0) {
            console.log('‚ö†Ô∏è Processamento conclu√≠do com alguns erros. Verifique o relat√≥rio.');
        } else {
            console.log('‚ùå Nenhum lan√ßamento foi processado com sucesso. Verifique os erros.');
        }
        console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
        
        // ===== LOGOFF ANTES DE FECHAR =====
        logComTimestamp('üö™ Fazendo logoff do sistema...');
        try {
            await page.goto('https://unimedcerrado.topsaude.com.br/TSNMVC/TSNMVC/Account/Login?ssoUserLogon=S');
            logComTimestamp('‚úÖ Logoff realizado com sucesso!');
        } catch (logoffError) {
            logComTimestamp(`‚ö†Ô∏è Erro durante logoff: ${logoffError.message}`);
            logComTimestamp('üîÑ Continuando para fechar navegador...');
        }
        
    } catch (error) {
        console.error('‚ùå Erro cr√≠tico durante automa√ß√£o:', error.message);
        console.error('Stack trace:', error.stack);
        
        const timestampErro = Date.now();
        const nomeScreenshotCritico = `erro_critico_${timestampErro}.png`;
        
        try {
            await page.screenshot({ path: nomeScreenshotCritico, fullPage: true });
            logComTimestamp(`üì∏ Screenshot do erro cr√≠tico salvo como: ${nomeScreenshotCritico}`);
        } catch (screenshotError) {
            logComTimestamp('‚ùå N√£o foi poss√≠vel salvar screenshot do erro cr√≠tico');
        }
        
        const logErro = {
            timestamp: new Date().toLocaleString('pt-BR'),
            erro: error.message,
            stack: error.stack,
            dados_processados_ate_erro: resultadosDetalhados
        };
        
        try {
            fs.writeFileSync(`log_erro_critico_${timestampErro}.json`, JSON.stringify(logErro, null, 2));
            logComTimestamp(`üìÑ Log do erro cr√≠tico salvo como: log_erro_critico_${timestampErro}.json`);
        } catch (logError) {
            logComTimestamp('‚ùå N√£o foi poss√≠vel salvar log do erro cr√≠tico');
        }
        
        throw error;
        
    } finally {
        try {
            await browser.close();
            logComTimestamp('üèÅ Navegador fechado');
        } catch (closeError) {
            logComTimestamp('‚ö†Ô∏è Erro ao fechar navegador:', closeError.message);
        }
    }
}

// ===== VERIFICA√á√ÉO DE SEGURAN√áA ANTES DA EXECU√á√ÉO =====
async function verificacaoSeguranca() {
    console.log('üîí === VERIFICA√á√ÉO DE SEGURAN√áA ===');
    console.log('‚ö†Ô∏è  Esta automa√ß√£o VAI SALVAR dados no sistema!');
    console.log('‚ö†Ô∏è  Certifique-se de que todos os dados est√£o corretos!');
    console.log('üîê  O login ser√° feito manualmente no navegador');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    
    if (!fs.existsSync('dados_lancamento.xlsx')) {
        throw new Error('‚ùå Arquivo dados_lancamento.xlsx n√£o encontrado!');
    }
    
    try {
        const workbook = XLSX.readFile('dados_lancamento.xlsx');
        const worksheet = workbook.Sheets[workbook.SheetNames[0]];
        const dados = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
        const dadosLimpos = dados.filter(linha => 
            linha && linha.some(celula => celula !== undefined && celula !== null && celula.toString().trim() !== '')
        );
        
        console.log(`üìä Preview da planilha (${dadosLimpos.length} linha(s)):`);
        console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
        
        dadosLimpos.slice(0, 3).forEach((linha, index) => {
            const resumo = `${linha[0] || ''} | ${linha[1] || ''} | ${linha[3] || ''}`;
            console.log(`‚îÇ Linha ${index + 1}: ${resumo.padEnd(50)} ‚îÇ`);
        });
        
        if (dadosLimpos.length > 3) {
            console.log(`‚îÇ ... e mais ${dadosLimpos.length - 3} linha(s)                    ‚îÇ`);
        }
        console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
        
        console.log('\nüîê LEMBRE-SE:');
        console.log('‚Ä¢ Tenha suas credenciais do TopSaude prontas');
        console.log('‚Ä¢ O navegador abrir√° para login manual');
        console.log('‚Ä¢ N√ÉO feche o navegador durante o processo');
        
    } catch (error) {
        console.error('‚ùå Erro ao ler preview da planilha:', error.message);
        throw error;
    }
}

// ===== EXECU√á√ÉO PRINCIPAL =====
async function main() {
    try {
        await verificacaoSeguranca();
        
        console.log('\n‚è∞ Iniciando em 5 segundos...');
        console.log('‚è∞ Pressione Ctrl+C para cancelar!');
        
        // Countdown de seguran√ßa
        for (let i = 5; i > 0; i--) {
            process.stdout.write(`‚è∞ ${i}... `);
            await new Promise(resolve => setTimeout(resolve, 1000));
        }
        
        console.log('\nüöÄ INICIANDO AUTOMA√á√ÉO!\n');
        
        await automatizarUnimed();
        
        console.log('\n‚úÖ Automa√ß√£o conclu√≠da com sucesso!');
        process.exit(0);
        
    } catch (error) {
        console.error('\n‚ùå Falha na automa√ß√£o:', error.message);
        console.error('üìù Verifique os arquivos de log e screenshots para mais detalhes');
        process.exit(1);
    }
}

// Captura sinais de interrup√ß√£o para limpeza
process.on('SIGINT', () => {
    console.log('\nüõë Automa√ß√£o interrompida pelo usu√°rio');
    console.log('üßπ Fazendo limpeza...');
    process.exit(0);
});

process.on('SIGTERM', () => {
    console.log('\nüõë Automa√ß√£o terminada externamente');
    process.exit(0);
});

process.on('unhandledRejection', (reason, promise) => {
    console.error('‚ùå Erro n√£o tratado:', reason);
    process.exit(1);
});

// Executa o programa principal
main();